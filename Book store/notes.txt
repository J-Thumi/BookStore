created 2 folders backend and frontend
In the frontend folder I created the .gitignore file and README.md 

Navigated to the backend folder in the terminal and input the comand: npm init -y
        The command npm init -y is used to quickly initialize a new Node.js project with default settings. This command creates a package.json file, which is essential for managing a Node.js project's dependencies, scripts, version, and other metadata. The -y flag automatically answers "yes" to all prompts, accepting the default values.

        In the package.json file created I added a line of code: "type":"module"
    In Node.js, adding "type": "module" to your package.json file specifies that your project uses ECMAScript modules (ESM) instead of CommonJS modules. This allows you to use the import and export syntax natively without needing a transpiler like Babel.
                    Notes and Considerations 
            File Extensions: When using ESM, you must include the file extension (.js, .mjs, etc.) in your import statements.
            No require and module.exports: These are CommonJS features and will not work with ESM. Instead, use import and export.
            Top-Level await: With ESM, you can use await at the top level of your modules without needing to wrap it in an async function.
                                        Example: Using Top-Level await
                            
                            // example.js
                            const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
                            const data = await response.json();
                            console.log(data);

            If you need to use both CommonJS and ESM in your project, you can mix them by naming your CommonJS files with a .cjs extension and ESM files with a .mjs extension, or by specifying "type": "module" in some parts of your project but not others.

            Adding "type": "module" to your package.json file allows you to use ECMAScript modules in your Node.js project. This enables you to use modern JavaScript features like import and export natively. Remember to include file extensions in your import statements and adapt your code to use ESM syntax. This setup helps you write cleaner, more modular code and leverage the latest JavaScript features

                                                // utils.js
                                    export function greet(name) {
                                    return `Hello, ${name}!`;
                                    }

                                    // index.js
                                    import { greet } from './utils.js';
                                    console.log(greet('World'));

                                    Run Your Code: node index.js

I installed both express and nodemon
Changed the code in scripts of the package.json to:
        "start":"node index.js",
        "dev":"nodemon index.js"

in the backend created index.js imported express natively : import express from 'express'
created another called config.js
        A config.js file is typically used in a project to store configuration settings and variables. This file allows you to manage settings centrally and access them throughout your application. The content and structure of config.js can vary depending on the project requirements and the environment (e.g., development, testing, production).

        stored the port in which the project will run in and since it was not to be used here i exported it
to run the server: npm run dev
to see results of the server in browser the query is: localhost: the port the server is listening to


added the uri of the online mongo database from atlas in the config file 


due to CORS policy react caanot directly access the data in dattabase using the query provided by postman hence naavigate to the backend folder install cors:   npm install cors
                                                import it: import cors from 'cors'
                                                use it in code: app.use(cors())


above data is available everywhere to manage this we can write a function in the cors()

app.use(cors({
        origin:"http://localhost:5555"
        method:['GET','POST','PUT','DELETE']
        allowedHeaders:['Content-Type']
})
)